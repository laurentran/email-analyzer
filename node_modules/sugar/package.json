{
  "_args": [
    [
      "sugar@1.3.x",
      "/Users/lauren/Desktop/code/email-ml-demo/node_modules/sentence-tokenizer"
    ]
  ],
  "_from": "sugar@>=1.3.0 <1.4.0",
  "_id": "sugar@1.3.9",
  "_inCache": true,
  "_installable": true,
  "_location": "/sugar",
  "_npmUser": {
    "email": "plummer.andrew@gmail.com",
    "name": "l_andrew_l"
  },
  "_npmVersion": "1.3.2",
  "_phantomChildren": {},
  "_requested": {
    "name": "sugar",
    "raw": "sugar@1.3.x",
    "rawSpec": "1.3.x",
    "scope": null,
    "spec": ">=1.3.0 <1.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sentence-tokenizer"
  ],
  "_resolved": "https://registry.npmjs.org/sugar/-/sugar-1.3.9.tgz",
  "_shasum": "f879c6c87721252b51fd0b6520412d98d83cb179",
  "_shrinkwrap": null,
  "_spec": "sugar@1.3.x",
  "_where": "/Users/lauren/Desktop/code/email-ml-demo/node_modules/sentence-tokenizer",
  "author": {
    "name": "Andrew Plummer"
  },
  "bugs": {
    "url": "https://github.com/andrewplummer/Sugar/issues"
  },
  "dependencies": {},
  "description": "A Javascript library for working with native objects.",
  "devDependencies": {},
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "f879c6c87721252b51fd0b6520412d98d83cb179",
    "tarball": "https://registry.npmjs.org/sugar/-/sugar-1.3.9.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "homepage": "http://sugarjs.com/",
  "keywords": [
    "ender",
    "functional",
    "utility"
  ],
  "main": "./release/sugar-full.development.js",
  "maintainers": [
    {
      "name": "l_andrew_l",
      "email": "plummer.andrew@gmail.com"
    }
  ],
  "name": "sugar",
  "optionalDependencies": {},
  "readme": "Sugar\n=====\n\n[![Build Status](https://secure.travis-ci.org/andrewplummer/Sugar.png)](http://travis-ci.org/andrewplummer/Sugar)\n\nA Javascript library for working with native objects.\nhttp://sugarjs.com/\n\n\nEdge Build\n===============\n\nPublic stable releases will be made available on the site and also exist in `release/`.\nAny push made to `master` branch *should* have its unit tests passing, although maybe not\nin all browsing environments (IE, etc) to ensure that it is stable, at least to a certain degree.\n\n\nCustom Builds\n===============\n\nSugar now allows custom builds that let you opt in or out packages. This can be done [here](http://sugarjs.com/customize).\nCustom builds can also be created with `script/build_custom.rb`. With ruby installed, simply call:\n\n```\nruby script/build_custom.rb core array string\n```\n\nlisting the packages you want to include. The advantage of using this\nscript is that it will perform all the minification on the fly, providing more fine-grained control by allowing you to\nmanipulate the source code in `lib/` before building. If you want to remove specific methods from a package, you can do it this way.\nBe careful about removing dependencies, however, especially methods in `core.js`, the extending methods of which are required.\n\n\nUnit Tests Node\n===============\n\nUnit tests can be run through the shell script at `./unit_tests/node.sh`\n\n\nDate Localizations\n==================\n\nSugar includes 11 localizations in the main package:\n\n- English (en)\n- French (fr)\n- German (de)\n- Spanish (es)\n- Italian (it)\n- Russian (ru)\n- Korean (ko)\n- Portuguese (pt)\n- Japanese (ja)\n- Simplified Chinese (zh-CN)\n- Traditional Chinese (zh-TW)\n\n\nIn addition to these major locales, custom locales can be added using:\n\n```\nDate.addLocale(LOCALE_CODE, LOCALIZATION_OBJECT)\n```\n\nDocumentation for this available [here](http://sugarjs.com/dates). Also refer to `lib/locales` for examples of what kind of data and formats are required in localization objects. All localizations, including those not found in the main package will be kept here.\n\n\nContributing Locales\n====================\n\nIf you do add a custom format for your locale, please consider forking and adding it to the repo! This especially includes the addition of new locales, but also new formats or tweaks to existing locales. Not everything can be added to the main package, but I would like to have as many languages/formats as possible available. When adding a locale contribution, the most important thing is to add unit tests that assert the correct format. These unit tests are found at `unit_tests/environments/sugar/date_LOCALE.js`. Simply add or adjust the formats for the locale (the more tests, the better!) and issue me a pull request -- I will update the code to add these locales/formats. Have a look at other unit tests files for an example of the unit testing format.\n\n\nContributing Lib Comparisons\n============================\n\nLib comparisons to various other libraries can be seen at http://sugarjs.com/libs. This is one of the areas where contributions are most welcome, as I don't have extensive knowledge of many different libraries, and there is so much to cover. To contribute simply find or create the appropriate lib name in `docs/libs`, and follow the format provided. This will be an ongoing process, and I will push changes here out to the site every so often.\n\n\nOther Contributions\n===================\n\nFor other contributions, please add well formed unit tests in the Sugar environment at `unit_tests/environments/sugar/MODULE.js`. Unit tests can be run directly in the browser from `unit_tests/sugar.html`, and should all be passing in all major browsers (Webkit,Mozilla,Opera, and IE6+). Node.js unit tests should also be passing and can be run in the console with `unit_tests/node.sh`.\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andrewplummer/Sugar.git"
  },
  "scripts": {
    "test": "./unit_tests/node.sh"
  },
  "version": "1.3.9"
}
